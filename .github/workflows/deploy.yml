name: Build and Release Music Player

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Package (DEB and RPM)
        run: |
          mvn clean package -Djpackage.type=deb
          mvn clean package -Djpackage.type=rpm

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-installers
          path: |
            *.deb
            *.rpm

  build-windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v2
        with:
          path: C:\\Users\\runneradmin\\.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Package (EXE)
        run: mvn clean package -Djpackage.type=exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-installer
          path: |
            *.exe

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Linux Installers
        uses: actions/download-artifact@v2
        with:
          name: linux-installers

      - name: Download Windows Installer
        uses: actions/download-artifact@v2
        with:
          name: windows-installer

      - name: Extract Version from Maven
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Music Player v${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changelog
            - Includes installers for Linux and Windows.

      - name: Upload Linux Installers
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "*.deb"
          asset_name: music-player-${{ env.VERSION }}.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux RPM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "*.rpm"
          asset_name: music-player-${{ env.VERSION }}.rpm
          asset_content_type: application/x-rpm

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "*.exe"
          asset_name: music-player-${{ env.VERSION }}.exe
          asset_content_type: application/x-msdownload
